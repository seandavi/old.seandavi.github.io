<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sean Davis</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Sean Davis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Sean Davis</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Approaches to accessing ClinicalTrials.gov data</title>
      <link>/post/2017-03-21-approaches-to-accessing-clinicaltrials-gov-data/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-03-21-approaches-to-accessing-clinicaltrials-gov-data/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;I have been attending the biannual Clinical Informatics for Cancer Centers (CI4CC) conference and there has been a fair amount of dicussion of &lt;a href=&#34;https://clinicaltrials.gov&#34;&gt;ClinicalTrials.gov&lt;/a&gt; as a resource for enhancing patient engagement, trial recruitment, and results reporting. One of the original reasons for me to attend was to help run a hackathon centered around the newest incarnation of API to access ClinicalTrials.gov data. The details of the API are described in text at the &lt;a href=&#34;https://clinicaltrialsapi.cancer.gov&#34;&gt;API endpoint&lt;/a&gt;. &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;-based code for the server side is available at the &lt;a href=&#34;https://github.com/NCIP/clinical-trials-search&#34;&gt;GitHub repository&lt;/a&gt;. In preparation for the workshop discussion, I prepared a &lt;a href=&#34;https://github.com/seandavi/ClinicalTrialsAPI&#34;&gt;client package using R, the ClinicalTrialsAPI package&lt;/a&gt;. The RESTful API is very simple, so a quick code runthrough using the ClinicalTrialsAPI package will give a sense of the capabilities.&lt;/p&gt;
&lt;p&gt;The package is available on GitHub and is MIT-licensed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;#39;seandavi/ClinicalTrialsAPI&amp;#39;)
library(&amp;#39;ClinicalTrialsAPI&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After installing and loading the package, we can get a sense of the data available using a simple query. In the next code block, we are not&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res = ct_search()
trialresults = res$trials
str(trialresults[1],list.len=10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ :List of 47
##   ..$ nci_id                              : chr &amp;quot;NCI-2014-01508&amp;quot;
##   ..$ nct_id                              : chr &amp;quot;NCT02193282&amp;quot;
##   ..$ protocol_id                         : chr &amp;quot;A081105&amp;quot;
##   ..$ ccr_id                              : NULL
##   ..$ ctep_id                             : chr &amp;quot;A081105&amp;quot;
##   ..$ dcp_id                              : NULL
##   ..$ other_ids                           :List of 1
##   .. ..$ :List of 2
##   .. .. ..$ name : chr &amp;quot;Study Protocol Other Identifier&amp;quot;
##   .. .. ..$ value: chr &amp;quot;CALGB A081105&amp;quot;
##   ..$ associated_studies                  :List of 1
##   .. ..$ :List of 2
##   .. .. ..$ study_id     : chr &amp;quot;NCI-2014-01509&amp;quot;
##   .. .. ..$ study_id_type: chr &amp;quot;NCI&amp;quot;
##   ..$ amendment_date                      : chr &amp;quot;2015-12-11T00:00:00&amp;quot;
##   ..$ current_trial_status                : chr &amp;quot;Active&amp;quot;
##   .. [list output truncated]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Filtering results is pretty straightforward, as only limited comparators are available (see &lt;a href=&#34;https://clinicaltrialsapi.cancer.gov&#34;&gt;docs&lt;/a&gt; for details). The &lt;code&gt;fields()&lt;/code&gt; function returns all fields and their types as a named character vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fields())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## accepts_healthy_volunteers_indicator                              acronym 
##                             &amp;quot;string&amp;quot;                             &amp;quot;string&amp;quot; 
##                       amendment_date                       anatomic_sites 
##                               &amp;quot;date&amp;quot;                             &amp;quot;string&amp;quot; 
##                 arms.arm_description                        arms.arm_name 
##                             &amp;quot;string&amp;quot;                             &amp;quot;string&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the API has a term mapping functionality, useful for type-ahead functionality or mapping text to terms. The client returns a &lt;code&gt;data.frame&lt;/code&gt; when called with a text to match.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lookup_term(&amp;quot;panc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      term_key                        term term_type count
## 1        pancreatic_carcinoma        Pancreatic Carcinoma _diseases   314
## 2           pancreatic_cancer           Pancreatic Cancer _diseases   314
## 3   pancreatic_adenocarcinoma   Pancreatic Adenocarcinoma _diseases   213
## 4  stage_iv_pancreatic_cancer  Stage IV Pancreatic Cancer _diseases   160
## 5 stage_iii_pancreatic_cancer Stage III Pancreatic Cancer _diseases   154
##   count_normalized codes      score
## 1       0.12093690 C3850 0.06781202
## 2       0.12093690 C3850 0.06781202
## 3       0.08313159 C8294 0.04661374
## 4       0.06288961 C5711 0.02821089
## 5       0.06058007 C7787 0.02717488&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some more advanced queries are available &lt;a href=&#34;https://github.com/seandavi/ClinicalTrialsAPI&#34;&gt;at the ClinicalTrialsAPI github repo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R Under development (unstable) (2016-10-26 r71594)
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## Running under: macOS Sierra 10.12.3
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  base     
## 
## other attached packages:
## [1] ClinicalTrialsAPI_0.1.0 magrittr_1.5           
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.9          bookdown_0.3         withr_1.0.2         
##  [4] digest_0.6.12        rprojroot_1.2        R6_2.2.0            
##  [7] jsonlite_1.3         backports_1.0.5      git2r_0.18.0        
## [10] evaluate_0.10        httr_1.2.1           blogdown_0.0.18     
## [13] stringi_1.1.2        curl_2.3             rmarkdown_1.3       
## [16] devtools_1.12.0.9000 tools_3.4.0          stringr_1.2.0       
## [19] purrr_0.2.2          pkgload_0.0.0.9000   yaml_2.1.14         
## [22] pkgbuild_0.0.0.9000  memoise_1.0.0        htmltools_0.3.5     
## [25] knitr_1.15.1         methods_3.4.0&lt;/code&gt;&lt;/pre&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Matched tumor/normal pairs--a use case for the GenomicDataCommons Bioconductor package</title>
      <link>/post/2017-03-04-testing-the-genomicdatacommons-package/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-03-04-testing-the-genomicdatacommons-package/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;The NCI Genomic Data Commons (&lt;a href=&#34;https://gdc.nci.nih.gov&#34;&gt;GDC&lt;/a&gt;) is a reboot of the approach that NCI uses to manage and expose genomic and associated clinical and experimental metadata. I have been working on a &lt;a href=&#34;https://bioconductor.org&#34;&gt;Bioconductor&lt;/a&gt; package that interfaces with the &lt;a href=&#34;https://gdc-api.nci.nih.gov&#34;&gt;GDC API&lt;/a&gt; to provide search and data retrieval from within R.&lt;/p&gt;
&lt;p&gt;In the first of what will likely be a set of use cases for the &lt;a href=&#34;https://github.com/Bioconductor/GenomicDataCommons&#34;&gt;GenomicDataCommons&lt;/a&gt;, I am going to address a question that came up on twitter from &lt;a href=&#34;https://twitter.com/sleight82&#34;&gt;@sleight82&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/sleight82/status/837898737540198400&#34;&gt;Asking for a non-tweeter: can you find matched control samples?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;{{ tweet 837898737540198400 }}&lt;/p&gt;
&lt;p&gt;The answer is, “Yes.” I am going to assume that what the “non-tweeter” friend meant was that he or she was interested in finding matched tumor/normal data related to, for example, gene expression, and that the interest is in a specific disease category or TCGA. So, I am going to answer the more specific question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you find matched primary tumor/solid tissue normal samples and associated RNA-Seq gene expression files from TCGA breast cancer cases?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GenomicDataCommons)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: magrittr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;GenomicDataCommons&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The GDC API puts some constraints on what can be done directly. But, since we are working in R, we have a toolbox that allows us to build a solution out of component parts. The strategy that I am going to employ is a three-step approach&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Find RNA-Seq gene expression files derived from “Solid Tissue Normal”&lt;/li&gt;
&lt;li&gt;Find RNA-Seq gene expression files derived from “Primary Tumor”&lt;/li&gt;
&lt;li&gt;Limit cases from #1 and #2 that have gene expression results from both normal and tumor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this code block, find all “HTSeq - Counts” files that are derived from “Solid Tissue Normal” in the project “TCGA-BRCA”. I used a combination of &lt;code&gt;files() %&amp;gt;% select(available_fields(&#39;files&#39;) %&amp;gt;% results()&lt;/code&gt; to get an overview of the data available in the &lt;code&gt;files()&lt;/code&gt; endpoint, followed by &lt;code&gt;grep_fields()&lt;/code&gt; and &lt;code&gt;available_values()&lt;/code&gt; to determine how to build filters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nl_ge_files = files() %&amp;gt;%
    filter(~   cases.samples.sample_type==&amp;#39;Solid Tissue Normal&amp;#39; &amp;amp;
               cases.project.project_id == &amp;#39;TCGA-BRCA&amp;#39; &amp;amp;
               analysis.workflow_type == &amp;quot;HTSeq - Counts&amp;quot;) %&amp;gt;%
    GenomicDataCommons::select(c(default_fields(&amp;#39;files&amp;#39;),
                                 &amp;#39;cases.case_id&amp;#39;,
                                 &amp;#39;cases.samples.sample_type&amp;#39;)) %&amp;gt;%
    results_all() %&amp;gt;%
    as.data.frame()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And do the same, but now looking for gene expression from tumors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tm_ge_files = files() %&amp;gt;%
    filter(~   cases.samples.sample_type==&amp;#39;Primary Tumor&amp;#39; &amp;amp;
               cases.project.project_id == &amp;#39;TCGA-BRCA&amp;#39; &amp;amp;
               analysis.workflow_type == &amp;quot;HTSeq - Counts&amp;quot;) %&amp;gt;%
    GenomicDataCommons::select(c(default_fields(&amp;#39;files&amp;#39;),
                                 &amp;#39;cases.case_id&amp;#39;,
                                 &amp;#39;cases.samples.sample_type&amp;#39;)) %&amp;gt;%
    results_all() %&amp;gt;%
    as.data.frame()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have two data frames describing the normal- and tumor-derived TCGA-BRCA gene expression files. Note that I asked the GDC to provide &lt;code&gt;cases.case_id&lt;/code&gt; as part of the record using &lt;code&gt;select()&lt;/code&gt;. By looking for the intersection of cases between these two sets of files, we can find cases that contain files derived from both tumor and normal tissue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matchedcases = intersect(tm_ge_files$cases.case_id,
                         nl_ge_files$cases.case_id)
# how many matched cases?
length(matchedcases)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 112&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create a &lt;code&gt;data.frame&lt;/code&gt; that contains file information for only the matched samples:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matched_tn_ge_file_info = rbind(subset(nl_ge_files,cases.case_id %in% matchedcases),
                                subset(tm_ge_files,cases.case_id %in% matchedcases))
head(matched_tn_ge_file_info)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                file_id                      data_type
## 1 0168550b-f361-49e2-832e-913e9e783240 Gene Expression Quantification
## 2 0389c08d-927d-4254-8d7f-f44963594db3 Gene Expression Quantification
## 3 06024e67-5afb-4bd7-98af-1a5ef7abd554 Gene Expression Quantification
## 4 091a502c-544e-421b-8024-62a4807cccf5 Gene Expression Quantification
## 5 0b1a91bc-78c2-4ca8-9067-cd18804a42a5 Gene Expression Quantification
## 6 0bcdef87-7c2c-4c26-a30a-7cefee80d0ca Gene Expression Quantification
##                   updated_datetime                 created_datetime
## 1 2016-09-29T17:33:56.586700-05:00 2016-05-30T18:48:02.044327-05:00
## 2 2016-09-29T17:37:26.925468-05:00 2016-05-29T11:14:20.886223-05:00
## 3 2016-09-29T17:41:15.388673-05:00 2016-05-29T10:24:00.271641-05:00
## 4 2016-09-29T17:45:55.150313-05:00 2016-05-30T18:35:58.038072-05:00
## 5 2016-09-29T17:49:06.065235-05:00 2016-05-30T18:31:01.014992-05:00
## 6 2016-09-29T17:50:12.284644-05:00 2016-05-26T21:20:48.935001-05:00
##                                              file_name
## 1 2eeb46a1-0422-4a77-b58d-3b7d57d51b44.htseq.counts.gz
## 2 2826bcb9-5ddb-49c5-96fd-a3dba5885e7a.htseq.counts.gz
## 3 3a04fb30-378c-48a0-a02e-85cf81b31b43.htseq.counts.gz
## 4 54a62dcd-c9a6-4a97-85c9-62e364766fca.htseq.counts.gz
## 5 95c0cf0b-7077-4a93-9590-3948e55c6e31.htseq.counts.gz
## 6 c3ed7c7a-b80a-4de2-8dfb-b60bcf336375.htseq.counts.gz
##                             md5sum data_format access     state
## 1 b11432b3e7e9ece3a8a31d84d7ddc693         TXT   open submitted
## 2 c4f5255f3e0d553ac2a2dbfd4eae8610         TXT   open submitted
## 3 bb66f1f847107d7d2ad310e6fa720712         TXT   open submitted
## 4 c4beca6838ff9edb43505a11e6547898         TXT   open submitted
## 5 7d2a48c37c4d834528c5de69695087ae         TXT   open submitted
## 6 2954040a9b69d1e8f5dd45e7a0db70e0         TXT   open submitted
##             data_category file_size
## 1 Transcriptome Profiling    258320
## 2 Transcriptome Profiling    257186
## 3 Transcriptome Profiling    255526
## 4 Transcriptome Profiling    255703
## 5 Transcriptome Profiling    257562
## 6 Transcriptome Profiling    254835
##                                 submitter_id            type file_state
## 1 2eeb46a1-0422-4a77-b58d-3b7d57d51b44_count gene_expression  processed
## 2 2826bcb9-5ddb-49c5-96fd-a3dba5885e7a_count gene_expression  processed
## 3 3a04fb30-378c-48a0-a02e-85cf81b31b43_count gene_expression  processed
## 4 54a62dcd-c9a6-4a97-85c9-62e364766fca_count gene_expression  processed
## 5 95c0cf0b-7077-4a93-9590-3948e55c6e31_count gene_expression  processed
## 6 c3ed7c7a-b80a-4de2-8dfb-b60bcf336375_count gene_expression  processed
##   experimental_strategy  acl                        cases.case_id
## 1               RNA-Seq open cab38ea8-4555-413c-b81e-4621aac4ef85
## 2               RNA-Seq open e666081b-caaf-4e8b-9446-807be71201a5
## 3               RNA-Seq open 4a032bad-e726-48f2-8f39-e3acc109cc91
## 4               RNA-Seq open a32cb96a-78bf-456e-a6ab-2d47b2c67ad4
## 5               RNA-Seq open 994ca1f5-ad10-44ec-aa21-71fc2940653b
## 6               RNA-Seq open 2021ed1f-dc75-4701-b8b8-1386466e4802
##         cases.samples
## 1 Solid Tissue Normal
## 2 Solid Tissue Normal
## 3 Solid Tissue Normal
## 4 Solid Tissue Normal
## 5 Solid Tissue Normal
## 6 Solid Tissue Normal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the gene expression data are not that big, we can use the GDC API to download the data files directly. I use the BiocParallel package to facilitate parallel downloads.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(BiocParallel)
register(MulticoreParam())
destdir = tempdir() # use a temp directory for example, change for yourself
fnames = bplapply(as.character(matched_tn_ge_file_info$file_id),
                  function(file_id) {
                      gdcdata(file_id, progress = FALSE,
                              destination_dir = destdir,
                              overwrite = TRUE)
                  })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;fnames&lt;/code&gt; should be a list of file names that can be read into and processed with R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R Under development (unstable) (2016-10-26 r71594)
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## Running under: macOS Sierra 10.12.3
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  base     
## 
## other attached packages:
## [1] GenomicDataCommons_0.99.8 magrittr_1.5             
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.9       xml2_1.1.1        knitr_1.15.1     
##  [4] xtable_1.8-2      R6_2.2.0          stringr_1.2.0    
##  [7] httr_1.2.1        tools_3.4.0       data.table_1.10.4
## [10] miniUI_0.1.1      htmltools_0.3.5   assertthat_0.1   
## [13] yaml_2.1.14       lazyeval_0.2.0    rprojroot_1.2    
## [16] digest_0.6.12     tibble_1.2        bookdown_0.3     
## [19] shiny_1.0.0       readr_1.0.0       curl_2.3         
## [22] evaluate_0.10     mime_0.5          rmarkdown_1.3    
## [25] blogdown_0.0.18   stringi_1.1.2     methods_3.4.0    
## [28] backports_1.0.5   jsonlite_1.3      httpuv_1.3.3&lt;/code&gt;&lt;/pre&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;#####content/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>
